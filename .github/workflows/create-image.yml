# file name: create-image.yml
name: create-image
on:
  push:
    tags:
      - 'v*'

jobs:
  create-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      
      - name: login-docker
        run: echo ${{ secrets.HARBOR_PASSWORD }} | docker login -u ${{ secrets.HARBOR_USERNAME }} --password-stdin

      - name: checkout
        uses: actions/checkout@v2

      - name: create image
        run: |
          cd app
          docker build -t test-app:${{ steps.get-version.outputs.VERSION }} .
          echo 'Created Image with name:tag = test-app:${{ steps.get-version.outputs.VERSION }}'

      - name: get-images-id
        id: image-id
        run: |
          echo ::set-output name=IMAGE_ID::$(docker images -q test-app:${{ steps.get-version.outputs.VERSION }})

      - name: upload image to registry
        run: |
          docker tag ${{ steps.image-id.outputs.IMAGE_ID }} rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}
          docker push rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}  

      - name: install yq
        uses: mikefarah/yq@v4.15.1 

      - name: update infra yaml file
        run: |
          cd infra
          yq e -i '.spec.template.spec.containers[0].image="rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}"' calc-deployment.yml
          cat calc-deployment.yml

      - name: push change
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: infra/calc-deployment.yml
          destination_repo: rjhaikal/github-argo
          destination_branch: master
          destination_folder: infra
          user_email: majidqoba52@gmail.com
          user_name: rjhaikal
          commit_message: update image version ${{ steps.get_version.outputs.VERSION }} in yml file
  
  trivy_scanning:
    needs: create-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}'
          format: 'table'
          exit-code: '0'
          severity: 'MEDIUM,HIGH,CRITICAL'

  # deploy_staging:
  #   runs-on: self-hosted
  #   steps:
  #     - name: ArgoCD Deploy to Staging
  #       run: |
  #         argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_CREDS_USR }} --password  ${{ secrets.ARGOCD_CREDS_PSW}}
  #         ARGOCD_SERVER= ${{ secrets.ARGOCD_SERVER }} argocd app create test-app-staging --project staging --repo https://github.com/rjhaikal/jenkins-argo.git --path ./infra --dest-namespace calc-stg --dest-server https://kubernetes.default.svc --upsert
  #         IMAGE_DIGEST=$(docker image inspect $IMAGE:latest -f '{{join .RepoDigests ","}}')
  #         ## Customize image 
  #         ARGOCD_SERVER= ${{ secrets.ARGOCD_SERVER }} argocd --grpc-web app set test-app-staging --kustomize-image $IMAGE_DIGEST
          
  #         # Deploy to ArgoCD
  #         ARGOCD_SERVER= ${{ secrets.ARGOCD_SERVER }} argocd --grpc-web app sync test-app-staging --force 
  #         ARGOCD_SERVER= ${{ secrets.ARGOCD_SERVER }} argocd --grpc-web app wait test-app-staging --timeout 600
