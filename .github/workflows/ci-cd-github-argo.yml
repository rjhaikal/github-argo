# file name: create-image.yml
name: ci-cd-github-argo
on:
  push:
    tags:
      - 'v*'

jobs:
  Checkout & Build Image:
    runs-on: ubuntu-latest
    steps:
      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Image
        run: |
          echo ${{ secrets.HARBOR_PASSWORD }} | docker login -u ${{ secrets.HARBOR_USERNAME }} --password-stdin
          cd app
          docker build -t test-app:${{ steps.get-version.outputs.VERSION }}-rc .
          echo 'Created Image with name:tag = test-app:${{ steps.get-version.outputs.VERSION }}-rc'

      - name: Push Images
        id: image-id
        run: |
          echo ::set-output name=IMAGE_ID::$(docker images -q test-app:${{ steps.get-version.outputs.VERSION }}-rc)
          docker tag ${{ steps.image-id.outputs.IMAGE_ID }} rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}-rc
          docker push rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}-rc

      - name: Update Manifest Yaml
        uses: mikefarah/yq@v4.15.1
        run: |
          cd infra
          yq e -i '.spec.template.spec.containers[0].image="rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}-rc"' calc-deployment.yml
          cat calc-deployment.yml

      - name: Push Change Back to Github
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: infra/calc-deployment.yml
          destination_repo: rjhaikal/github-argo
          destination_branch: staging
          destination_folder: infra/staging
          user_email: majidqoba52@gmail.com
          user_name: rjhaikal
          commit_message: update image version ${{ steps.get_version.outputs.VERSION }} in yml file
  
  Image Scanning:
    needs: create-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}-rc'
          format: 'table'
          exit-code: '0'
          severity: 'MEDIUM,HIGH,CRITICAL'

  Deploy Staging:
    needs: [Checkout & Build Image, Image Scanning]
    runs-on: self-hosted
    environment:
      name: Staging
    steps:
      - name: ArgoCD Deploy to Staging
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_CREDS_USR }} --password  ${{ secrets.ARGOCD_CREDS_PSW}}
          argocd app create test-app-staging --project default --repo https://github.com/rjhaikal/github-argo.git --path ./infra/staging --dest-namespace calc-stg --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync test-app-staging --force 
          argocd --grpc-web app wait test-app-staging --timeout 600

  Deploy Production:
    needs: [Checkout & Build Image, Image Scanning, Deploy Staging]
    runs-on: self-hosted
    environment:
      name: Production
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Update Manifest Yaml
        uses: mikefarah/yq@v4.15.1
        run: |
          cd infra
          yq e -i '.spec.template.spec.containers[0].image="rjhaikal/test-app:${{ steps.get-version.outputs.VERSION }}"' calc-deployment.yml
          cat calc-deployment.yml

      - name: Push Change Back to Github
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: infra/calc-deployment.yml
          destination_repo: rjhaikal/github-argo
          destination_branch: production
          destination_folder: infra/production
          user_email: majidqoba52@gmail.com
          user_name: rjhaikal
          commit_message: update image version ${{ steps.get_version.outputs.VERSION }} in yml file

      - name: ArgoCD Deploy to Production
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_CREDS_USR }} --password  ${{ secrets.ARGOCD_CREDS_PSW}}
          argocd app create test-app-prod --project default --repo https://github.com/rjhaikal/github-argo.git --path ./infra/production --dest-namespace calc --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync test-app-prod --force 
          argocd --grpc-web app wait test-app-prod --timeout 600
